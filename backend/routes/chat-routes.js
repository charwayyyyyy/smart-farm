const express = require('express');
const router = express.Router();

// Mock AI response generator
const generateAIResponse = (query, language) => {
  // Mock responses for different languages
  const mockResponses = {
    'en': {
      'tomato blight': 'To prevent tomato blight, ensure good air circulation by spacing plants properly. Water at the base of plants in the morning so leaves dry quickly. Apply copper-based fungicides preventatively. Remove and destroy infected plants immediately to prevent spread.',
      'default': 'I understand your question. For best farming practices in Ghana, consider your local climate conditions and soil type. Regular monitoring of your crops is essential for early pest detection.'
    },
    'tw': {
      'default': 'Mete wo asɛm no ase. Sɛ wobɛyɛ afuo pa wɔ Ghana a, hwɛ wo beaɛ ewiem tebea ne dɔteɛ no su. Ɛho hia sɛ wobɛhwɛ wo nnɔbaeɛ no berɛ biara sɛdeɛ wobɛhu mmoa a ɛbɛsɛe no ntɛm.'
    },
    'ee': {
      'default': 'Mese wò nya nyaŋutinya. Ne Ghanaʋeʋe nyui wɔwɔ la, bu ŋu wò nutome ya kple anyigba ƒe nɔnɔme. Ele be nàlé ŋku ɖe wò nukuwo ŋu ɣesiaɣi be nàkpɔ nugblẽlawo kaba.'
    },
    'dag': {
      'default': 'N wum a puhiri. Ni Ghana pukparisuŋ viela, nyin a ni a tiŋgbani mini ni a tingbani buɣisibu. Di niŋ velimaŋli ni a nya kpahi a bindira ni bɛ saɣim.'
    }
  };
  
  // Determine which response to use
  const languageResponses = mockResponses[language] || mockResponses['en'];
  
  // Check if query contains keywords for specific responses
  for (const [keyword, response] of Object.entries(languageResponses)) {
    if (keyword !== 'default' && query.toLowerCase().includes(keyword)) {
      return Promise.resolve(response);
    }
  }
  
  // Return default response if no specific match
  return Promise.resolve(languageResponses.default);
};

// @route   POST /api/chat/voice-query
// @desc    Process voice query and return response
// @access  Public
router.post('/voice-query', async (req, res) => {
  try {
    const { query, language = 'en' } = req.body;
    
    if (!query) {
      return res.status(400).json({ success: false, message: 'No query provided' });
    }
    
    // Generate AI response
    const response = await generateAIResponse(query, language);
    
    // Mock audio URL (in a real implementation, this would be generated by a TTS service)
    const audioUrl = `/api/mock-audio/${language}-response.mp3`;
    
    res.json({
      success: true,
      response,
      audioUrl
    });
  } catch (error) {
    console.error('Voice query error:', error);
    res.status(500).json({ success: false, message: 'Server error', error: error.message });
  }
});

module.exports = router;